@typeparam TItem
@using MudBlazor
@using System.Linq.Expressions
@using System.Reflection
@inject NavigationManager NavManager

@if (HasChildContent)
{
    <MudDataGrid Items="@Items" ReadOnly="@ReadOnly" EditMode="@EditMode" Elevation="@Elevation" >
        <Columns>
            @if (ChildContent != null)
            {
                <HierarchyColumn />
            }
            @foreach (var column in Columns)
            {
                <PropertyColumn Property="@GetExpression(column.Property)" Title="@column.Title" />
            }
            @if (DgButton != null)
            {
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudStack Row>
                            @DgButton(context)
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            }
        </Columns>
        <ChildRowContent Context="cellContext">
            @if (ChildContent != null)
            {
                @ChildContent(cellContext)
            }
        </ChildRowContent>
    </MudDataGrid>
}
else
{
    <MudDataGrid Items="@Items" ReadOnly="@ReadOnly" EditMode="@EditMode" Elevation="@Elevation">
        <Columns>
            @foreach (var column in Columns)
            {
                <PropertyColumn Property="@GetExpression(column.Property)" Title="@column.Title" />
            }
            @if (DgButton != null)
            {
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudStack Row>
                         @DgButton(context)
                     </MudStack>
                 </CellTemplate>
             </TemplateColumn>
            }
        </Columns>
    </MudDataGrid>
}


@code {
    [Parameter]
    public IEnumerable<TItem> Items { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; } = true;

    [Parameter]
    public DataGridEditMode EditMode { get; set; } = DataGridEditMode.Cell;

    [Parameter]
    public int Elevation { get; set; } = 16;

    [Parameter]
    public List<(string Property, string Title)> Columns { get; set; }

    // [Parameter]
    // public bool ShowButton { get; set; } = false;

    [Parameter]
    public RenderFragment<CellContext<TItem>> ChildContent { get; set; }

    private bool HasChildContent => ChildContent != null;


    [Parameter]
    public RenderFragment<CellContext<TItem>> DgButton { get; set; } = null;

    private Expression<Func<TItem, object>> GetExpression(string propertyName)
    {
        var parameter = Expression.Parameter(typeof(TItem), "x");
        var property = Expression.Property(parameter, propertyName);
        var conversion = Expression.Convert(property, typeof(object)); // Needed to return as object
        return Expression.Lambda<Func<TItem, object>>(conversion, parameter);
    }
}
